// Generated by gencpp from file tgr_msgs/VehicleMode.msg
// DO NOT EDIT!


#ifndef TGR_MSGS_MESSAGE_VEHICLEMODE_H
#define TGR_MSGS_MESSAGE_VEHICLEMODE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tgr_msgs
{
template <class ContainerAllocator>
struct VehicleMode_
{
  typedef VehicleMode_<ContainerAllocator> Type;

  VehicleMode_()
    : mission(false)
    , visial_guidance(false)
    , obstacle_avoidance(false)
    , mode(0)  {
    }
  VehicleMode_(const ContainerAllocator& _alloc)
    : mission(false)
    , visial_guidance(false)
    , obstacle_avoidance(false)
    , mode(0)  {
  (void)_alloc;
    }



   typedef uint8_t _mission_type;
  _mission_type mission;

   typedef uint8_t _visial_guidance_type;
  _visial_guidance_type visial_guidance;

   typedef uint8_t _obstacle_avoidance_type;
  _obstacle_avoidance_type obstacle_avoidance;

   typedef int32_t _mode_type;
  _mode_type mode;





  typedef boost::shared_ptr< ::tgr_msgs::VehicleMode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tgr_msgs::VehicleMode_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleMode_

typedef ::tgr_msgs::VehicleMode_<std::allocator<void> > VehicleMode;

typedef boost::shared_ptr< ::tgr_msgs::VehicleMode > VehicleModePtr;
typedef boost::shared_ptr< ::tgr_msgs::VehicleMode const> VehicleModeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tgr_msgs::VehicleMode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tgr_msgs::VehicleMode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tgr_msgs::VehicleMode_<ContainerAllocator1> & lhs, const ::tgr_msgs::VehicleMode_<ContainerAllocator2> & rhs)
{
  return lhs.mission == rhs.mission &&
    lhs.visial_guidance == rhs.visial_guidance &&
    lhs.obstacle_avoidance == rhs.obstacle_avoidance &&
    lhs.mode == rhs.mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tgr_msgs::VehicleMode_<ContainerAllocator1> & lhs, const ::tgr_msgs::VehicleMode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tgr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tgr_msgs::VehicleMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tgr_msgs::VehicleMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tgr_msgs::VehicleMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tgr_msgs::VehicleMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tgr_msgs::VehicleMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tgr_msgs::VehicleMode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tgr_msgs::VehicleMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0fa27dc54e25fb913feff0e9b007f61d";
  }

  static const char* value(const ::tgr_msgs::VehicleMode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0fa27dc54e25fb91ULL;
  static const uint64_t static_value2 = 0x3feff0e9b007f61dULL;
};

template<class ContainerAllocator>
struct DataType< ::tgr_msgs::VehicleMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tgr_msgs/VehicleMode";
  }

  static const char* value(const ::tgr_msgs::VehicleMode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tgr_msgs::VehicleMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool mission\n"
"bool visial_guidance\n"
"bool obstacle_avoidance\n"
"\n"
"int32 mode\n"
;
  }

  static const char* value(const ::tgr_msgs::VehicleMode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tgr_msgs::VehicleMode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mission);
      stream.next(m.visial_guidance);
      stream.next(m.obstacle_avoidance);
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleMode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tgr_msgs::VehicleMode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tgr_msgs::VehicleMode_<ContainerAllocator>& v)
  {
    s << indent << "mission: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mission);
    s << indent << "visial_guidance: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.visial_guidance);
    s << indent << "obstacle_avoidance: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacle_avoidance);
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TGR_MSGS_MESSAGE_VEHICLEMODE_H
