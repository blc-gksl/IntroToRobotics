// Generated by gencpp from file tgr_msgs/PixelPose.msg
// DO NOT EDIT!


#ifndef TGR_MSGS_MESSAGE_PIXELPOSE_H
#define TGR_MSGS_MESSAGE_PIXELPOSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tgr_msgs
{
template <class ContainerAllocator>
struct PixelPose_
{
  typedef PixelPose_<ContainerAllocator> Type;

  PixelPose_()
    : vertical(0)
    , horizontal(0)  {
    }
  PixelPose_(const ContainerAllocator& _alloc)
    : vertical(0)
    , horizontal(0)  {
  (void)_alloc;
    }



   typedef int32_t _vertical_type;
  _vertical_type vertical;

   typedef int32_t _horizontal_type;
  _horizontal_type horizontal;





  typedef boost::shared_ptr< ::tgr_msgs::PixelPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tgr_msgs::PixelPose_<ContainerAllocator> const> ConstPtr;

}; // struct PixelPose_

typedef ::tgr_msgs::PixelPose_<std::allocator<void> > PixelPose;

typedef boost::shared_ptr< ::tgr_msgs::PixelPose > PixelPosePtr;
typedef boost::shared_ptr< ::tgr_msgs::PixelPose const> PixelPoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tgr_msgs::PixelPose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tgr_msgs::PixelPose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tgr_msgs::PixelPose_<ContainerAllocator1> & lhs, const ::tgr_msgs::PixelPose_<ContainerAllocator2> & rhs)
{
  return lhs.vertical == rhs.vertical &&
    lhs.horizontal == rhs.horizontal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tgr_msgs::PixelPose_<ContainerAllocator1> & lhs, const ::tgr_msgs::PixelPose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tgr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tgr_msgs::PixelPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tgr_msgs::PixelPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tgr_msgs::PixelPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tgr_msgs::PixelPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tgr_msgs::PixelPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tgr_msgs::PixelPose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tgr_msgs::PixelPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd3d11edbbe650abcf221f4b7803fa7c";
  }

  static const char* value(const ::tgr_msgs::PixelPose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbd3d11edbbe650abULL;
  static const uint64_t static_value2 = 0xcf221f4b7803fa7cULL;
};

template<class ContainerAllocator>
struct DataType< ::tgr_msgs::PixelPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tgr_msgs/PixelPose";
  }

  static const char* value(const ::tgr_msgs::PixelPose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tgr_msgs::PixelPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 vertical\n"
"int32 horizontal\n"
;
  }

  static const char* value(const ::tgr_msgs::PixelPose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tgr_msgs::PixelPose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vertical);
      stream.next(m.horizontal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PixelPose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tgr_msgs::PixelPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tgr_msgs::PixelPose_<ContainerAllocator>& v)
  {
    s << indent << "vertical: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vertical);
    s << indent << "horizontal: ";
    Printer<int32_t>::stream(s, indent + "  ", v.horizontal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TGR_MSGS_MESSAGE_PIXELPOSE_H
