// Generated by gencpp from file tgr_msgs/PixelPoses.msg
// DO NOT EDIT!


#ifndef TGR_MSGS_MESSAGE_PIXELPOSES_H
#define TGR_MSGS_MESSAGE_PIXELPOSES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <tgr_msgs/PixelPose.h>
#include <tgr_msgs/PixelPose.h>
#include <tgr_msgs/PixelPose.h>

namespace tgr_msgs
{
template <class ContainerAllocator>
struct PixelPoses_
{
  typedef PixelPoses_<ContainerAllocator> Type;

  PixelPoses_()
    : pixel_0()
    , pixel_1()
    , pixel_2()  {
    }
  PixelPoses_(const ContainerAllocator& _alloc)
    : pixel_0(_alloc)
    , pixel_1(_alloc)
    , pixel_2(_alloc)  {
  (void)_alloc;
    }



   typedef  ::tgr_msgs::PixelPose_<ContainerAllocator>  _pixel_0_type;
  _pixel_0_type pixel_0;

   typedef  ::tgr_msgs::PixelPose_<ContainerAllocator>  _pixel_1_type;
  _pixel_1_type pixel_1;

   typedef  ::tgr_msgs::PixelPose_<ContainerAllocator>  _pixel_2_type;
  _pixel_2_type pixel_2;





  typedef boost::shared_ptr< ::tgr_msgs::PixelPoses_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tgr_msgs::PixelPoses_<ContainerAllocator> const> ConstPtr;

}; // struct PixelPoses_

typedef ::tgr_msgs::PixelPoses_<std::allocator<void> > PixelPoses;

typedef boost::shared_ptr< ::tgr_msgs::PixelPoses > PixelPosesPtr;
typedef boost::shared_ptr< ::tgr_msgs::PixelPoses const> PixelPosesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tgr_msgs::PixelPoses_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tgr_msgs::PixelPoses_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tgr_msgs::PixelPoses_<ContainerAllocator1> & lhs, const ::tgr_msgs::PixelPoses_<ContainerAllocator2> & rhs)
{
  return lhs.pixel_0 == rhs.pixel_0 &&
    lhs.pixel_1 == rhs.pixel_1 &&
    lhs.pixel_2 == rhs.pixel_2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tgr_msgs::PixelPoses_<ContainerAllocator1> & lhs, const ::tgr_msgs::PixelPoses_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tgr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tgr_msgs::PixelPoses_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tgr_msgs::PixelPoses_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tgr_msgs::PixelPoses_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tgr_msgs::PixelPoses_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tgr_msgs::PixelPoses_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tgr_msgs::PixelPoses_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tgr_msgs::PixelPoses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4bca10ae68cd3b2be52f35ffecd1a4b4";
  }

  static const char* value(const ::tgr_msgs::PixelPoses_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4bca10ae68cd3b2bULL;
  static const uint64_t static_value2 = 0xe52f35ffecd1a4b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::tgr_msgs::PixelPoses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tgr_msgs/PixelPoses";
  }

  static const char* value(const ::tgr_msgs::PixelPoses_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tgr_msgs::PixelPoses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tgr_msgs/PixelPose pixel_0\n"
"tgr_msgs/PixelPose pixel_1\n"
"tgr_msgs/PixelPose pixel_2\n"
"================================================================================\n"
"MSG: tgr_msgs/PixelPose\n"
"int32 vertical\n"
"int32 horizontal\n"
;
  }

  static const char* value(const ::tgr_msgs::PixelPoses_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tgr_msgs::PixelPoses_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pixel_0);
      stream.next(m.pixel_1);
      stream.next(m.pixel_2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PixelPoses_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tgr_msgs::PixelPoses_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tgr_msgs::PixelPoses_<ContainerAllocator>& v)
  {
    s << indent << "pixel_0: ";
    s << std::endl;
    Printer< ::tgr_msgs::PixelPose_<ContainerAllocator> >::stream(s, indent + "  ", v.pixel_0);
    s << indent << "pixel_1: ";
    s << std::endl;
    Printer< ::tgr_msgs::PixelPose_<ContainerAllocator> >::stream(s, indent + "  ", v.pixel_1);
    s << indent << "pixel_2: ";
    s << std::endl;
    Printer< ::tgr_msgs::PixelPose_<ContainerAllocator> >::stream(s, indent + "  ", v.pixel_2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TGR_MSGS_MESSAGE_PIXELPOSES_H
