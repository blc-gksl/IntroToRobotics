// Generated by gencpp from file tgr_msgs/Line.msg
// DO NOT EDIT!


#ifndef TGR_MSGS_MESSAGE_LINE_H
#define TGR_MSGS_MESSAGE_LINE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace tgr_msgs
{
template <class ContainerAllocator>
struct Line_
{
  typedef Line_<ContainerAllocator> Type;

  Line_()
    : point_begin()
    , point_end()  {
    }
  Line_(const ContainerAllocator& _alloc)
    : point_begin(_alloc)
    , point_end(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _point_begin_type;
  _point_begin_type point_begin;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _point_end_type;
  _point_end_type point_end;





  typedef boost::shared_ptr< ::tgr_msgs::Line_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tgr_msgs::Line_<ContainerAllocator> const> ConstPtr;

}; // struct Line_

typedef ::tgr_msgs::Line_<std::allocator<void> > Line;

typedef boost::shared_ptr< ::tgr_msgs::Line > LinePtr;
typedef boost::shared_ptr< ::tgr_msgs::Line const> LineConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tgr_msgs::Line_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tgr_msgs::Line_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tgr_msgs::Line_<ContainerAllocator1> & lhs, const ::tgr_msgs::Line_<ContainerAllocator2> & rhs)
{
  return lhs.point_begin == rhs.point_begin &&
    lhs.point_end == rhs.point_end;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tgr_msgs::Line_<ContainerAllocator1> & lhs, const ::tgr_msgs::Line_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tgr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tgr_msgs::Line_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tgr_msgs::Line_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tgr_msgs::Line_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tgr_msgs::Line_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tgr_msgs::Line_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tgr_msgs::Line_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tgr_msgs::Line_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dc31879070f0eee41b7cce1d12323475";
  }

  static const char* value(const ::tgr_msgs::Line_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdc31879070f0eee4ULL;
  static const uint64_t static_value2 = 0x1b7cce1d12323475ULL;
};

template<class ContainerAllocator>
struct DataType< ::tgr_msgs::Line_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tgr_msgs/Line";
  }

  static const char* value(const ::tgr_msgs::Line_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tgr_msgs::Line_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point point_begin\n"
"geometry_msgs/Point point_end\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::tgr_msgs::Line_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tgr_msgs::Line_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point_begin);
      stream.next(m.point_end);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Line_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tgr_msgs::Line_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tgr_msgs::Line_<ContainerAllocator>& v)
  {
    s << indent << "point_begin: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.point_begin);
    s << indent << "point_end: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.point_end);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TGR_MSGS_MESSAGE_LINE_H
