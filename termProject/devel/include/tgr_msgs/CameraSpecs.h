// Generated by gencpp from file tgr_msgs/CameraSpecs.msg
// DO NOT EDIT!


#ifndef TGR_MSGS_MESSAGE_CAMERASPECS_H
#define TGR_MSGS_MESSAGE_CAMERASPECS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace tgr_msgs
{
template <class ContainerAllocator>
struct CameraSpecs_
{
  typedef CameraSpecs_<ContainerAllocator> Type;

  CameraSpecs_()
    : vertical_resolution(0)
    , horizontal_resolution(0)
    , vertical_fov(0.0)
    , horizontal_fov(0.0)
    , camera_position()
    , camera_orientation()  {
    }
  CameraSpecs_(const ContainerAllocator& _alloc)
    : vertical_resolution(0)
    , horizontal_resolution(0)
    , vertical_fov(0.0)
    , horizontal_fov(0.0)
    , camera_position(_alloc)
    , camera_orientation(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _vertical_resolution_type;
  _vertical_resolution_type vertical_resolution;

   typedef int32_t _horizontal_resolution_type;
  _horizontal_resolution_type horizontal_resolution;

   typedef double _vertical_fov_type;
  _vertical_fov_type vertical_fov;

   typedef double _horizontal_fov_type;
  _horizontal_fov_type horizontal_fov;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _camera_position_type;
  _camera_position_type camera_position;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _camera_orientation_type;
  _camera_orientation_type camera_orientation;





  typedef boost::shared_ptr< ::tgr_msgs::CameraSpecs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tgr_msgs::CameraSpecs_<ContainerAllocator> const> ConstPtr;

}; // struct CameraSpecs_

typedef ::tgr_msgs::CameraSpecs_<std::allocator<void> > CameraSpecs;

typedef boost::shared_ptr< ::tgr_msgs::CameraSpecs > CameraSpecsPtr;
typedef boost::shared_ptr< ::tgr_msgs::CameraSpecs const> CameraSpecsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tgr_msgs::CameraSpecs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tgr_msgs::CameraSpecs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tgr_msgs::CameraSpecs_<ContainerAllocator1> & lhs, const ::tgr_msgs::CameraSpecs_<ContainerAllocator2> & rhs)
{
  return lhs.vertical_resolution == rhs.vertical_resolution &&
    lhs.horizontal_resolution == rhs.horizontal_resolution &&
    lhs.vertical_fov == rhs.vertical_fov &&
    lhs.horizontal_fov == rhs.horizontal_fov &&
    lhs.camera_position == rhs.camera_position &&
    lhs.camera_orientation == rhs.camera_orientation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tgr_msgs::CameraSpecs_<ContainerAllocator1> & lhs, const ::tgr_msgs::CameraSpecs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tgr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tgr_msgs::CameraSpecs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tgr_msgs::CameraSpecs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tgr_msgs::CameraSpecs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tgr_msgs::CameraSpecs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tgr_msgs::CameraSpecs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tgr_msgs::CameraSpecs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tgr_msgs::CameraSpecs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "68b9d8e8fe95a0178aa4b8e3061de049";
  }

  static const char* value(const ::tgr_msgs::CameraSpecs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x68b9d8e8fe95a017ULL;
  static const uint64_t static_value2 = 0x8aa4b8e3061de049ULL;
};

template<class ContainerAllocator>
struct DataType< ::tgr_msgs::CameraSpecs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tgr_msgs/CameraSpecs";
  }

  static const char* value(const ::tgr_msgs::CameraSpecs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tgr_msgs::CameraSpecs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 vertical_resolution\n"
"int32 horizontal_resolution\n"
"float64 vertical_fov\n"
"float64 horizontal_fov\n"
"geometry_msgs/Point camera_position\n"
"geometry_msgs/Point camera_orientation\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::tgr_msgs::CameraSpecs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tgr_msgs::CameraSpecs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vertical_resolution);
      stream.next(m.horizontal_resolution);
      stream.next(m.vertical_fov);
      stream.next(m.horizontal_fov);
      stream.next(m.camera_position);
      stream.next(m.camera_orientation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CameraSpecs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tgr_msgs::CameraSpecs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tgr_msgs::CameraSpecs_<ContainerAllocator>& v)
  {
    s << indent << "vertical_resolution: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vertical_resolution);
    s << indent << "horizontal_resolution: ";
    Printer<int32_t>::stream(s, indent + "  ", v.horizontal_resolution);
    s << indent << "vertical_fov: ";
    Printer<double>::stream(s, indent + "  ", v.vertical_fov);
    s << indent << "horizontal_fov: ";
    Printer<double>::stream(s, indent + "  ", v.horizontal_fov);
    s << indent << "camera_position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.camera_position);
    s << indent << "camera_orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.camera_orientation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TGR_MSGS_MESSAGE_CAMERASPECS_H
